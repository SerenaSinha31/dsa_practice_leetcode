class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> charSet;
        int left = 0, maxLength = 0;

        for (int right = 0; right < s.size(); ++right) {
            // If we encounter a duplicate character, move the left pointer
            while (charSet.find(s[right]) != charSet.end()) {
                charSet.erase(s[left]);
                ++left;
            }
            // Add the character at right pointer to the set
            charSet.insert(s[right]);
            // Update the maximum length of substring without duplicates
            maxLength = max(maxLength, right - left + 1);
        }

        return maxLength;
    }
};
